apply plugin: 'com.android.application'

android {
    compileSdkVersion appCompileSdkVersion
    buildToolsVersion appBuildToolsVersion

    defaultConfig {
        applicationId "org.cryse.unifystorage.explorer"
        minSdkVersion appMinSdkVersion
        targetSdkVersion appTargetSdkVersion
        versionCode appVersionCode
        versionName appVersionName
    }

    dataBinding {
        enabled = true
    }

    signingConfigs {
        debug {}
        release {}
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile libDependencies.junit
    compile project(':library')
    compile project(':providers:LocalStorage')
    compile project(':providers:OneDrive')
    compile project(':providers:Dropbox')

    compile libDependencies.appcompat
    compile libDependencies.design
    compile libDependencies.cardview
    compile libDependencies.recyclerview

    compile libDependencies.easypermission

    compile libDependencies.rxjava
    compile libDependencies.rxandroid

    compile libDependencies.butterknife
    compile libDependencies.realm

    compile(libDependencies.materialdrawer) {
        transitive = true
    }

    compile(libDependencies.materialdialog) {
        transitive = true
    }
}

def Properties props = new Properties()
def propFile = new File('app/signing.properties')
if (propFile.canRead()){
    props.load(new FileInputStream(propFile))
    def debugConfigName = '.debug'
    def releaseConfigName = '.release'
    def STORE_FILE = 'STORE_FILE'
    def STORE_PASSWORD = 'STORE_PASSWORD'
    def KEY_ALIAS = 'KEY_ALIAS'
    def KEY_PASSWORD = 'KEY_PASSWORD'
    if (props != null) {
        if(android.signingConfigs.hasProperty(debugConfigName)) {
            android.signingConfigs.debug.storeFile = file(props[STORE_FILE + debugConfigName])
            android.signingConfigs.debug.storePassword = props[STORE_PASSWORD + debugConfigName]
            android.signingConfigs.debug.keyAlias = props[KEY_ALIAS + debugConfigName]
            android.signingConfigs.debug.keyPassword = props[KEY_PASSWORD + debugConfigName]
        } else if(android.signingConfigs.hasProperty(releaseConfigName)) {
            android.signingConfigs.release.storeFile = file(props[STORE_FILE + releaseConfigName])
            android.signingConfigs.release.storePassword = props[STORE_PASSWORD + releaseConfigName]
            android.signingConfigs.release.keyAlias = props[KEY_ALIAS + releaseConfigName]
            android.signingConfigs.release.keyPassword = props[KEY_PASSWORD + releaseConfigName]
        }
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.debug.signingConfig = null
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.debug.signingConfig = null
    android.buildTypes.release.signingConfig = null
}